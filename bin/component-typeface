#!/usr/bin/env node

var find = require('findit');
var fs = require('fs');
var json = require('../package.json');
var handlebars = require('handlebars');
var mkdir = require('mkdirp');
var moment = require('moment');
var path = require('path');
var program = require('commander');
var slug = require('to-slug-case');


/**
 * Program.
 */

program
  .version(json.version)
  .description(json.description)
  .parse(process.argv);


/**
 * Prompts.
 */

var prompts = {
  family: 'family: ',
  url: 'url: ',
  name: 'name: ',
  weight: 'weight: ',
  style: 'style: ',
  woff: '.woff: ',
  ttf: '.ttf: ',
  eot: '.eot: '
};


/**
 * Ask the user for input.
 *
 * @param {Object} options
 */

program.prompt(prompts, function (options) {
  parse(options);

  copyFont(options.woff, options);
  copyFont(options.ttf, options);
  copyFont(options.eot, options);

  find(resolve(__dirname, '../template'))
    .on('file', function (file, stat) {
      render(file, options);
    })
    .on('end', function () {
      exit('Created typeface package: ' + options.family + ' ' + options.name + '.');
    });
});



/**
 * Copy from `src` to `dest`.
 *
 * @param {String} src
 * @param {String} dest
 */

function copy (src, dest) {
  if (!fs.existsSync(src)) exit('File not found: ' + src);
  var content = fs.readFileSync(src, 'utf8');
  fs.writeFileSync(resolve(dest), content);
}


/**
 * Copy a font `file` into the fonts folder with the given `options`.
 *
 * @param {String} file
 * @param {Object} options
 */

function copyFont (file, options) {
  var name = fontName(file, options);
  mkdir('fonts');
  copy(file, 'fonts/' + name);
}


/**
 * Exit with a `message`.
 *
 * @param {String} message
 */

function exit (message) {
  console.log();
  console.log(message);
  console.log();
  process.exit();
}

/**
 * Return a font name given a source `file` and a set of `options`.
 *
 * @param {String} file
 * @param {Object} options
 */

function fontName (file, options) {
  var ext = path.extname(file);
  return options.familySlug + '-' + options.nameSlug + ext;
}


/**
 * Parse `options`.
 *
 * @param {Object} options
 */

function parse (options) {
  if (!options.family) throw new Error('Must provide a typeface family name.');
  if (!options.name) throw new Error('Must provide a typeface name.');
  if (!options.woff) throw new Error('Must provide an .woff font file.');
  if (!options.ttf) throw new Error('Must provide an .ttf font file.');
  if (!options.eot) throw new Error('Must provide an .eot font file.');

  options.weight = options.weight || 'normal';
  options.style = options.style || 'normal';
  options.familySlug = slug(options.family);
  options.nameSlug = slug(options.name);
  options.date = moment().format('MMMM Do, YYYY');
  options.dashes = new Array(options.date.length+1).join('-');
}


/**
 * Render a handlebars `file` with `locals`.
 *
 * @param {String} file
 * @param {Object} locals
 */

function render (file, locals) {
  var content = fs.readFileSync(file, 'utf8');
  var out = path.basename(file, path.extname(file));
  var output = handlebars.compile(content)(locals);
  fs.writeFileSync(resolve(out), output);
}


/**
 * Resolve a file relative to this directory.
 *
 * @param {String} args...
 */

function resolve (args) {
  args = [].slice.call(arguments);
  return path.resolve.apply(path, args);
}